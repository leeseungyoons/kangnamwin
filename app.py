import streamlit as st
import pandas as pd

# ========================
# 페이지 기본 설정
# ========================
st.set_page_config(
    page_title="H조 순위 & 시나리오",
    page_icon="🏆",
    layout="wide",
)

# ========================
# 데이터 준비
# ========================
standings_data = [
    {"팀": "중앙대", "승": 5, "패": 1},
    {"팀": "강남대", "승": 3, "패": 2},
    {"팀": "시립대", "승": 3, "패": 2},
    {"팀": "인하대", "승": 3, "패": 3},
    {"팀": "명지대", "승": 0, "패": 6},
]

remaining_games = [
    "① 강남대 vs 시립대",
    "② 강남대 vs 인하대",
    "③ 강남대 vs 중앙대",
    "④ 명지대 vs 시립대",
    "⑤ 명지대 vs 중앙대",
    "⑥ 시립대 vs 인하대",
]

scenarios = {
    "강남대 (3승 2패)": {
        "확정 루트": "남은 3경기 전승 시 6승 2패 → 2위 확정",
        "유력 루트": "2승 1패 시 5승 3패 → 시립 ≤4승 or 맞대결 우위",
        "위험 루트": "1승 2패 시 탈락 가능성 ↑, 전패 시 2위 불가",
    },
    "시립대 (3승 2패)": {
        "확정 루트": "3승 전승 → 6승 2패 확정",
        "유력 루트": "2승 1패 시 5승 3패 → 강남 ≤4승 or 맞대결 우위",
        "위험 루트": "1승 이하 시 사실상 탈락",
    },
    "인하대 (3승 3패)": {
        "필수 조건": "남은 경기 전승(5승 3패) + 강남 or 시립 부진 필요",
        "추가 조건": "강남 상대로 4점차 이상 승리 필요 / 시립 상대로는 -13 불리",
        "현실적 결론": "이변 없으면 힘듦",
    },
}

notes = [
    "📌 중앙대는 남은 경기 1승만 하면 1위 확정적",
    "📌 강남대는 상위권과만 남아 일정이 빡셈",
    "📌 시립대는 명지전이 있어 상대적으로 유리",
    "📌 2위 싸움 핵심: 강남 vs 시립 맞대결",
    "📌 승자승 + 득실차까지 계산해야 최종 순위 결정",
]

# ========================
# 제목/소개
# ========================
st.title("🏆 H조 순위 & 시나리오")
st.markdown(
    """
    강남대, 시립대, 인하대가 치열하게 경쟁 중인 **H조 순위 상황**을 정리했습니다.  
    중앙대는 사실상 1위를 확정했고, 2위 싸움은 **강남 vs 시립 맞대결**이 최대 분수령!  
    """
)

# ========================
# 현재 순위 표
# ========================
st.header("📊 현재 순위")
df = pd.DataFrame(standings_data)
df["경기수"] = df["승"] + df["패"]
df["승률"] = (df["승"] / df["경기수"]).round(3)
df = df[["팀", "경기수", "승", "패", "승률"]]

st.dataframe(
    df,
    use_container_width=True,
    hide_index=True,
)

# ========================
# 잔여 경기
# ========================
st.header("📅 잔여 경기")

for i, game in enumerate(remaining_games, start=1):
    st.markdown(
        f"""
        <div style='padding:12px; margin-bottom:10px;
                    background-color:#111111; border:1px solid #444;
                    border-radius:8px; color:#ffffff; font-size:16px;'>
        <b>경기 {i}</b> ⚔️ {game}
        </div>
        """,
        unsafe_allow_html=True,
    )

# ========================
# 팀별 시나리오
# ========================
st.header("🔎 팀별 시나리오")

cols = st.columns(3)
for i, (team, paths) in enumerate(scenarios.items()):
    with cols[i]:
        st.subheader(team)
        for k, v in paths.items():
            if "확정" in k or "필수" in k:
                st.success(f"**{k}:** {v}")
            elif "유력" in k or "추가" in k:
                st.info(f"**{k}:** {v}")
            else:
                st.error(f"**{k}:** {v}")

# ========================
# 핵심 포인트
# ========================
st.header("📌 핵심 포인트")
for n in notes:
    st.markdown(f"- {n}")

# ========================
# 시나리오 흐름 (트리)
# ========================
st.header("🌳 시나리오 흐름 (텍스트)")
st.code(
    """\
[중앙대 5-1] → 남은 경기 1승 시 1위 확정
   |
   +-- [강남대 vs 시립대] → 2위 경쟁 핵심
   |
   +-- 인하대: 전승 + 타팀 부진 필요
   |
   +-- 명지대: 세대교체, 이미 하위권 확정
""",
    language="text",
)
